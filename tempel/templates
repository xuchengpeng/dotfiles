;; templates for TempEl

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

texinfo-mode

(defmac "@defmac " p n> r> "@end defmac")
(defun "@defun " p n> r> "@end defun")
(defvar "@defvar " p n> r> "@end defvar")
(example "@example " p n> r> "@end example")
(lisp "@lisp " p n> r> "@end lisp")
(bullet "@itemize @bullet{}" n> r> "@end itemize")
(code "@code{" p "}")
(var "@var{" p "}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let* (" p ")" n> r> ")")
(whenlet "(when-let* (" p ")" n> r> ")")
(whilelet "(while-let (" p ")" n> r> ")")
(andlet "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(lett "(let* (" p ")" n> r> ")")
(pcaselet "(pcase-let (" p ")" n> r> ")")
(pcaselett "(pcase-let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(header ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
        " -- " p " -*- lexical-binding: t -*-" n
        ";;; Commentary:" n ";;; Code:" n n)
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " ends here" n)

org-mode

(caption "#+caption: ")
(drawer ":" p ":" n r ":end:")
(begin "#+begin_" (s name) n> r> n "#+end_" name)
(quote "#+begin_quote" n> r> n "#+end_quote")
(sidenote "#+begin_sidenote" n> r> n "#+end_sidenote")
(marginnote "#+begin_marginnote" n> r> n "#+end_marginnote")
(example "#+begin_example" n> r> n "#+end_example")
(center "#+begin_center" n> r> n "#+end_center")
(ascii "#+begin_export ascii" n> r> n "#+end_export")
(html "#+begin_export html" n> r> n "#+end_export")
(latex "#+begin_export latex" n> r> n "#+end_export")
(comment "#+begin_comment" n> r> n "#+end_comment")
(verse "#+begin_verse" n> r> n "#+end_verse")
(src "#+begin_src " q n r n "#+end_src")
(gnuplot "#+begin_src gnuplot :var data=" (p "table") " :file " (p "plot.png") n r n "#+end_src" :post (org-edit-src-code))
(elisp "#+begin_src emacs-lisp" n r n "#+end_src")
(inlsrc "src_" p "{" q "}")
(title "#+TITLE: " n "#+AUTHOR: " n "#+DATE: " (format-time-string "<%Y-%m-%d %a %H:%M>") n)
(custom-id ":PROPERTIES:" n ":CUSTOM_ID: " p n ":END:" n)
(details "#+begin_details" n "#+begin_summary" n p n "#+end_summary" n n p n "#+end_details")
(aside "#+begin_aside" n p n "#+end_aside")

markdown-mode

(front-matter "---" n "title: " p n "date: " (format-time-string "%FT%T%z") n "categories: ["p"]" n "tags: ["p"]" n "---")
(more "<!--more-->")
(ltr "{{% ltr %}}" n q n "{{% /ltr %}}")
(rtl "{{% rtl %}}" n q n "{{% /rtl %}}")
(center "{{% center %}}" n q n "{{% /center %}}")
(mermaid "{{< mermaid >}}" n q n "{{< /mermaid >}}")
(details "{{< details summary=\"" p "\" >}}" n q n "{{< /details >}}")
(figure "{{< figure" n "  src=\"" p "\"" n "  alt=\"" p "\"" n "  caption=\"" p "\"" n "  class=\"" p "\"" n ">}}")
(highlight "{{< highlight " p " >}}" n q n "{{< /highlight >}}")
(typeit "{{< typeit" n "  tag=\"" p "\"" n "  class=\"" p "\"" n "  initialString=\"" p "\"" n "  speed=" p n "  lifeLike=" p n "  startDelay=" p n "  breakLines=" p n "  waitUntilVisible=" p n "  loop=" p n ">}}" n q n "{{< /typeit >}}")
(bilibili "{{< bilibili id=\"" p "\" p=" p " >}}")
(tabpane "{{< tabpane align=\"" p "\" >}}" n q n "{{< /tabpane >}}")
(tab "{{< tab \"" p "\" >}}" n q n "{{< /tab >}}")
(columns "{{< columns >}}" n q n "<--->" n n "{{< /columns >}}")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
